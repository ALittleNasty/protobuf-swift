// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "unittest_mset.proto"
// Syntax "Proto2"

import Foundation
import ProtocolBuffers

public extension ProtobufUnittest{}

public func == (lhs: ProtobufUnittest.TestMessageSet, rhs: ProtobufUnittest.TestMessageSet) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(4), endExclusive:Int32(2147483647))
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestMessageSetContainer, rhs: ProtobufUnittest.TestMessageSetContainer) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMessageSet == rhs.hasMessageSet) && (!lhs.hasMessageSet || lhs.messageSet == rhs.messageSet)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestMessageSetExtension1, rhs: ProtobufUnittest.TestMessageSetExtension1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasI == rhs.hasI) && (!lhs.hasI || lhs.i == rhs.i)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.TestMessageSetExtension2, rhs: ProtobufUnittest.TestMessageSetExtension2) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStr == rhs.hasStr) && (!lhs.hasStr || lhs.str == rhs.str)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.RawMessageSet, rhs: ProtobufUnittest.RawMessageSet) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.item == rhs.item)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: ProtobufUnittest.RawMessageSet.Item, rhs: ProtobufUnittest.RawMessageSet.Item) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTypeId == rhs.hasTypeId) && (!lhs.hasTypeId || lhs.typeId == rhs.typeId)
  fieldCheck = fieldCheck && (lhs.hasMessage_ == rhs.hasMessage_) && (!lhs.hasMessage_ || lhs.message_ == rhs.message_)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public var TestMessageSetExtension1messageSetExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestMsetRoot.sharedInstance.TestMessageSetExtension1messageSetExtensionStatic
   }
}
public var TestMessageSetExtension2messageSetExtension:ConcreateExtensionField {
   get {
       return ProtobufUnittest.UnittestMsetRoot.sharedInstance.TestMessageSetExtension2messageSetExtensionStatic
   }
}
public extension ProtobufUnittest {
  public struct UnittestMsetRoot {
    public static var sharedInstance : UnittestMsetRoot {
     struct Static {
         static let instance : UnittestMsetRoot = UnittestMsetRoot()
     }
     return Static.instance
    }
    var TestMessageSetExtension1messageSetExtensionStatic:ConcreateExtensionField
    var TestMessageSetExtension2messageSetExtensionStatic:ConcreateExtensionField
    public var extensionRegistry:ExtensionRegistry

    init() {
      TestMessageSetExtension1messageSetExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestMessageSet.self, fieldNumber: 1545008, defaultValue:ProtobufUnittest.TestMessageSetExtension1(), messageOrGroupClass:ProtobufUnittest.TestMessageSetExtension1.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:true)
      TestMessageSetExtension2messageSetExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ProtobufUnittest.TestMessageSet.self, fieldNumber: 1547769, defaultValue:ProtobufUnittest.TestMessageSetExtension2(), messageOrGroupClass:ProtobufUnittest.TestMessageSetExtension2.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:true)
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
      registry.addExtension(TestMessageSetExtension1messageSetExtensionStatic)
      registry.addExtension(TestMessageSetExtension2messageSetExtensionStatic)
    }
  }

  // A message with message_set_wire_format.
  final public class TestMessageSet : ExtendableMessage, GeneratedMessageProtocol{
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if !extensionsAreInitialized() {
        return false
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      try writeExtensionsToCodedOutputStream(output, startInclusive:Int32(4), endExclusive:Int32(2147483647))
      try unknownFields.writeAsMessageSetTo(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += extensionsSerializedSize()
      serialize_size += unknownFields.serializedSizeAsMessageSet()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtobufUnittest.TestMessageSet> {
      var mergedArray = Array<ProtobufUnittest.TestMessageSet>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.TestMessageSet? {
      return try ProtobufUnittest.TestMessageSet.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ProtobufUnittest.TestMessageSet {
      return try ProtobufUnittest.TestMessageSet.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestMsetRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSet {
      return try ProtobufUnittest.TestMessageSet.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.TestMessageSet {
      return try ProtobufUnittest.TestMessageSet.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSet {
      return try ProtobufUnittest.TestMessageSet.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.TestMessageSet {
      return try ProtobufUnittest.TestMessageSet.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSet {
      return try ProtobufUnittest.TestMessageSet.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestMessageSet.Builder {
      return ProtobufUnittest.TestMessageSet.classBuilder() as! ProtobufUnittest.TestMessageSet.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestMessageSet.Builder {
      return classBuilder() as! ProtobufUnittest.TestMessageSet.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMessageSet.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMessageSet.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestMessageSet.Builder {
      return try ProtobufUnittest.TestMessageSet.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ProtobufUnittest.TestMessageSet) throws -> ProtobufUnittest.TestMessageSet.Builder {
      return try ProtobufUnittest.TestMessageSet.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      let jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.TestMessageSet {
      return try ProtobufUnittest.TestMessageSet.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> ProtobufUnittest.TestMessageSet {
      return try ProtobufUnittest.TestMessageSet.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      output += try getExtensionDescription(Int32(4), endExclusive:Int32(2147483647), indent:indent)
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(4), endExclusive:Int32(2147483647)))
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestMessageSet"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestMessageSet"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestMessageSet.self
    }
    //Meta information declaration end

    final public class Builder : ExtendableMessageBuilder {
      private var builderResult:ProtobufUnittest.TestMessageSet = ProtobufUnittest.TestMessageSet()
      public func getMessage() -> ProtobufUnittest.TestMessageSet {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:ExtendableMessage {
           get {
               return builderResult
           }
      }
      override public func clear() -> ProtobufUnittest.TestMessageSet.Builder {
        builderResult = ProtobufUnittest.TestMessageSet()
        return self
      }
      override public func clone() throws -> ProtobufUnittest.TestMessageSet.Builder {
        return try ProtobufUnittest.TestMessageSet.builderWithPrototype(builderResult)
      }
      override public func build() throws -> ProtobufUnittest.TestMessageSet {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestMessageSet {
        let returnMe:ProtobufUnittest.TestMessageSet = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProtobufUnittest.TestMessageSet) throws -> ProtobufUnittest.TestMessageSet.Builder {
        if other == ProtobufUnittest.TestMessageSet() {
         return self
        }
        try mergeExtensionFields(other)
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.TestMessageSet.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSet.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.TestMessageSet.Builder {
        let resultDecodedBuilder = ProtobufUnittest.TestMessageSet.Builder()
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> ProtobufUnittest.TestMessageSet.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try ProtobufUnittest.TestMessageSet.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class TestMessageSetContainer : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasMessageSet:Bool = false
    public private(set) var messageSet:ProtobufUnittest.TestMessageSet!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if hasMessageSet {
       if !messageSet.isInitialized() {
         return false
       }
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasMessageSet {
        try output.writeMessage(1, value:messageSet)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasMessageSet {
          if let varSizemessageSet = messageSet?.computeMessageSize(1) {
              serialize_size += varSizemessageSet
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtobufUnittest.TestMessageSetContainer> {
      var mergedArray = Array<ProtobufUnittest.TestMessageSetContainer>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.TestMessageSetContainer? {
      return try ProtobufUnittest.TestMessageSetContainer.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ProtobufUnittest.TestMessageSetContainer {
      return try ProtobufUnittest.TestMessageSetContainer.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestMsetRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSetContainer {
      return try ProtobufUnittest.TestMessageSetContainer.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.TestMessageSetContainer {
      return try ProtobufUnittest.TestMessageSetContainer.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSetContainer {
      return try ProtobufUnittest.TestMessageSetContainer.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.TestMessageSetContainer {
      return try ProtobufUnittest.TestMessageSetContainer.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSetContainer {
      return try ProtobufUnittest.TestMessageSetContainer.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestMessageSetContainer.Builder {
      return ProtobufUnittest.TestMessageSetContainer.classBuilder() as! ProtobufUnittest.TestMessageSetContainer.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestMessageSetContainer.Builder {
      return classBuilder() as! ProtobufUnittest.TestMessageSetContainer.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMessageSetContainer.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMessageSetContainer.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestMessageSetContainer.Builder {
      return try ProtobufUnittest.TestMessageSetContainer.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ProtobufUnittest.TestMessageSetContainer) throws -> ProtobufUnittest.TestMessageSetContainer.Builder {
      return try ProtobufUnittest.TestMessageSetContainer.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasMessageSet {
        jsonMap["messageSet"] = try messageSet.encode()
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.TestMessageSetContainer {
      return try ProtobufUnittest.TestMessageSetContainer.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> ProtobufUnittest.TestMessageSetContainer {
      return try ProtobufUnittest.TestMessageSetContainer.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasMessageSet {
        output += "\(indent) messageSet {\n"
        if let outDescMessageSet = messageSet {
          output += try outDescMessageSet.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMessageSet {
                if let hashValuemessageSet = messageSet?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuemessageSet
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestMessageSetContainer"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestMessageSetContainer"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestMessageSetContainer.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestMessageSetContainer = ProtobufUnittest.TestMessageSetContainer()
      public func getMessage() -> ProtobufUnittest.TestMessageSetContainer {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasMessageSet:Bool {
           get {
               return builderResult.hasMessageSet
           }
      }
      public var messageSet:ProtobufUnittest.TestMessageSet! {
           get {
               if messageSetBuilder_ != nil {
                  builderResult.messageSet = messageSetBuilder_.getMessage()
               }
               return builderResult.messageSet
           }
           set (value) {
               builderResult.hasMessageSet = true
               builderResult.messageSet = value
           }
      }
      private var messageSetBuilder_:ProtobufUnittest.TestMessageSet.Builder! {
           didSet {
              builderResult.hasMessageSet = true
           }
      }
      public func getMessageSetBuilder() -> ProtobufUnittest.TestMessageSet.Builder {
        if messageSetBuilder_ == nil {
           messageSetBuilder_ = ProtobufUnittest.TestMessageSet.Builder()
           builderResult.messageSet = messageSetBuilder_.getMessage()
           if messageSet != nil {
              try! messageSetBuilder_.mergeFrom(messageSet)
           }
        }
        return messageSetBuilder_
      }
      public func setMessageSet(value:ProtobufUnittest.TestMessageSet!) -> ProtobufUnittest.TestMessageSetContainer.Builder {
        self.messageSet = value
        return self
      }
      public func mergeMessageSet(value:ProtobufUnittest.TestMessageSet) throws -> ProtobufUnittest.TestMessageSetContainer.Builder {
        if builderResult.hasMessageSet {
          builderResult.messageSet = try ProtobufUnittest.TestMessageSet.builderWithPrototype(builderResult.messageSet).mergeFrom(value).buildPartial()
        } else {
          builderResult.messageSet = value
        }
        builderResult.hasMessageSet = true
        return self
      }
      public func clearMessageSet() -> ProtobufUnittest.TestMessageSetContainer.Builder {
        messageSetBuilder_ = nil
        builderResult.hasMessageSet = false
        builderResult.messageSet = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> ProtobufUnittest.TestMessageSetContainer.Builder {
        builderResult = ProtobufUnittest.TestMessageSetContainer()
        return self
      }
      override public func clone() throws -> ProtobufUnittest.TestMessageSetContainer.Builder {
        return try ProtobufUnittest.TestMessageSetContainer.builderWithPrototype(builderResult)
      }
      override public func build() throws -> ProtobufUnittest.TestMessageSetContainer {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestMessageSetContainer {
        let returnMe:ProtobufUnittest.TestMessageSetContainer = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProtobufUnittest.TestMessageSetContainer) throws -> ProtobufUnittest.TestMessageSetContainer.Builder {
        if other == ProtobufUnittest.TestMessageSetContainer() {
         return self
        }
        if (other.hasMessageSet) {
            try mergeMessageSet(other.messageSet)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.TestMessageSetContainer.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSetContainer.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:ProtobufUnittest.TestMessageSet.Builder = ProtobufUnittest.TestMessageSet.Builder()
            if hasMessageSet {
              try subBuilder.mergeFrom(messageSet)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            messageSet = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.TestMessageSetContainer.Builder {
        let resultDecodedBuilder = ProtobufUnittest.TestMessageSetContainer.Builder()
        if let jsonValueMessageSet = jsonMap["messageSet"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.messageSet = try ProtobufUnittest.TestMessageSet.Builder.decodeToBuilder(jsonValueMessageSet).build()

        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> ProtobufUnittest.TestMessageSetContainer.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try ProtobufUnittest.TestMessageSetContainer.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class TestMessageSetExtension1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasI:Bool = false
    public private(set) var i:Int32 = Int32(0)

    public class func messageSetExtension() -> ConcreateExtensionField {
         return TestMessageSetExtension1messageSetExtension
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasI {
        try output.writeInt32(15, value:i)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasI {
        serialize_size += i.computeInt32Size(15)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtobufUnittest.TestMessageSetExtension1> {
      var mergedArray = Array<ProtobufUnittest.TestMessageSetExtension1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.TestMessageSetExtension1? {
      return try ProtobufUnittest.TestMessageSetExtension1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ProtobufUnittest.TestMessageSetExtension1 {
      return try ProtobufUnittest.TestMessageSetExtension1.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestMsetRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSetExtension1 {
      return try ProtobufUnittest.TestMessageSetExtension1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.TestMessageSetExtension1 {
      return try ProtobufUnittest.TestMessageSetExtension1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSetExtension1 {
      return try ProtobufUnittest.TestMessageSetExtension1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.TestMessageSetExtension1 {
      return try ProtobufUnittest.TestMessageSetExtension1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSetExtension1 {
      return try ProtobufUnittest.TestMessageSetExtension1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestMessageSetExtension1.Builder {
      return ProtobufUnittest.TestMessageSetExtension1.classBuilder() as! ProtobufUnittest.TestMessageSetExtension1.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestMessageSetExtension1.Builder {
      return classBuilder() as! ProtobufUnittest.TestMessageSetExtension1.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMessageSetExtension1.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMessageSetExtension1.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestMessageSetExtension1.Builder {
      return try ProtobufUnittest.TestMessageSetExtension1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ProtobufUnittest.TestMessageSetExtension1) throws -> ProtobufUnittest.TestMessageSetExtension1.Builder {
      return try ProtobufUnittest.TestMessageSetExtension1.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasI {
        jsonMap["i"] = NSNumber(int:i)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.TestMessageSetExtension1 {
      return try ProtobufUnittest.TestMessageSetExtension1.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> ProtobufUnittest.TestMessageSetExtension1 {
      return try ProtobufUnittest.TestMessageSetExtension1.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasI {
        output += "\(indent) i: \(i) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasI {
               hashCode = (hashCode &* 31) &+ i.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestMessageSetExtension1"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestMessageSetExtension1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestMessageSetExtension1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestMessageSetExtension1 = ProtobufUnittest.TestMessageSetExtension1()
      public func getMessage() -> ProtobufUnittest.TestMessageSetExtension1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasI:Bool {
           get {
                return builderResult.hasI
           }
      }
      public var i:Int32 {
           get {
                return builderResult.i
           }
           set (value) {
               builderResult.hasI = true
               builderResult.i = value
           }
      }
      public func setI(value:Int32) -> ProtobufUnittest.TestMessageSetExtension1.Builder {
        self.i = value
        return self
      }
      public func clearI() -> ProtobufUnittest.TestMessageSetExtension1.Builder{
           builderResult.hasI = false
           builderResult.i = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> ProtobufUnittest.TestMessageSetExtension1.Builder {
        builderResult = ProtobufUnittest.TestMessageSetExtension1()
        return self
      }
      override public func clone() throws -> ProtobufUnittest.TestMessageSetExtension1.Builder {
        return try ProtobufUnittest.TestMessageSetExtension1.builderWithPrototype(builderResult)
      }
      override public func build() throws -> ProtobufUnittest.TestMessageSetExtension1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestMessageSetExtension1 {
        let returnMe:ProtobufUnittest.TestMessageSetExtension1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProtobufUnittest.TestMessageSetExtension1) throws -> ProtobufUnittest.TestMessageSetExtension1.Builder {
        if other == ProtobufUnittest.TestMessageSetExtension1() {
         return self
        }
        if other.hasI {
             i = other.i
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.TestMessageSetExtension1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSetExtension1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 120 :
            i = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.TestMessageSetExtension1.Builder {
        let resultDecodedBuilder = ProtobufUnittest.TestMessageSetExtension1.Builder()
        if let jsonValueI = jsonMap["i"] as? NSNumber {
          resultDecodedBuilder.i = jsonValueI.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> ProtobufUnittest.TestMessageSetExtension1.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try ProtobufUnittest.TestMessageSetExtension1.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class TestMessageSetExtension2 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasStr:Bool = false
    public private(set) var str:String = ""

    public class func messageSetExtension() -> ConcreateExtensionField {
         return TestMessageSetExtension2messageSetExtension
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasStr {
        try output.writeString(25, value:str)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasStr {
        serialize_size += str.computeStringSize(25)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtobufUnittest.TestMessageSetExtension2> {
      var mergedArray = Array<ProtobufUnittest.TestMessageSetExtension2>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.TestMessageSetExtension2? {
      return try ProtobufUnittest.TestMessageSetExtension2.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ProtobufUnittest.TestMessageSetExtension2 {
      return try ProtobufUnittest.TestMessageSetExtension2.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestMsetRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSetExtension2 {
      return try ProtobufUnittest.TestMessageSetExtension2.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.TestMessageSetExtension2 {
      return try ProtobufUnittest.TestMessageSetExtension2.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSetExtension2 {
      return try ProtobufUnittest.TestMessageSetExtension2.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.TestMessageSetExtension2 {
      return try ProtobufUnittest.TestMessageSetExtension2.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSetExtension2 {
      return try ProtobufUnittest.TestMessageSetExtension2.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestMessageSetExtension2.Builder {
      return ProtobufUnittest.TestMessageSetExtension2.classBuilder() as! ProtobufUnittest.TestMessageSetExtension2.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestMessageSetExtension2.Builder {
      return classBuilder() as! ProtobufUnittest.TestMessageSetExtension2.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMessageSetExtension2.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestMessageSetExtension2.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestMessageSetExtension2.Builder {
      return try ProtobufUnittest.TestMessageSetExtension2.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ProtobufUnittest.TestMessageSetExtension2) throws -> ProtobufUnittest.TestMessageSetExtension2.Builder {
      return try ProtobufUnittest.TestMessageSetExtension2.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasStr {
        jsonMap["str"] = str
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.TestMessageSetExtension2 {
      return try ProtobufUnittest.TestMessageSetExtension2.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> ProtobufUnittest.TestMessageSetExtension2 {
      return try ProtobufUnittest.TestMessageSetExtension2.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasStr {
        output += "\(indent) str: \(str) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasStr {
               hashCode = (hashCode &* 31) &+ str.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestMessageSetExtension2"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestMessageSetExtension2"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestMessageSetExtension2.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestMessageSetExtension2 = ProtobufUnittest.TestMessageSetExtension2()
      public func getMessage() -> ProtobufUnittest.TestMessageSetExtension2 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasStr:Bool {
           get {
                return builderResult.hasStr
           }
      }
      public var str:String {
           get {
                return builderResult.str
           }
           set (value) {
               builderResult.hasStr = true
               builderResult.str = value
           }
      }
      public func setStr(value:String) -> ProtobufUnittest.TestMessageSetExtension2.Builder {
        self.str = value
        return self
      }
      public func clearStr() -> ProtobufUnittest.TestMessageSetExtension2.Builder{
           builderResult.hasStr = false
           builderResult.str = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> ProtobufUnittest.TestMessageSetExtension2.Builder {
        builderResult = ProtobufUnittest.TestMessageSetExtension2()
        return self
      }
      override public func clone() throws -> ProtobufUnittest.TestMessageSetExtension2.Builder {
        return try ProtobufUnittest.TestMessageSetExtension2.builderWithPrototype(builderResult)
      }
      override public func build() throws -> ProtobufUnittest.TestMessageSetExtension2 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestMessageSetExtension2 {
        let returnMe:ProtobufUnittest.TestMessageSetExtension2 = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProtobufUnittest.TestMessageSetExtension2) throws -> ProtobufUnittest.TestMessageSetExtension2.Builder {
        if other == ProtobufUnittest.TestMessageSetExtension2() {
         return self
        }
        if other.hasStr {
             str = other.str
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.TestMessageSetExtension2.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestMessageSetExtension2.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 202 :
            str = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.TestMessageSetExtension2.Builder {
        let resultDecodedBuilder = ProtobufUnittest.TestMessageSetExtension2.Builder()
        if let jsonValueStr = jsonMap["str"] as? String {
          resultDecodedBuilder.str = jsonValueStr
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> ProtobufUnittest.TestMessageSetExtension2.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try ProtobufUnittest.TestMessageSetExtension2.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  // MessageSet wire format is equivalent to this.
  final public class RawMessageSet : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class Item : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var hasTypeId:Bool = false
        public private(set) var typeId:Int32 = Int32(0)

        public private(set) var hasMessage_:Bool = false
        public private(set) var message_:NSData = NSData()

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
          if !hasTypeId {
            return false
          }
          if !hasMessage_ {
            return false
          }
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasTypeId {
            try output.writeInt32(2, value:typeId)
          }
          if hasMessage_ {
            try output.writeData(3, value:message_)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasTypeId {
            serialize_size += typeId.computeInt32Size(2)
          }
          if hasMessage_ {
            serialize_size += message_.computeDataSize(3)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtobufUnittest.RawMessageSet.Item> {
          var mergedArray = Array<ProtobufUnittest.RawMessageSet.Item>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.RawMessageSet.Item? {
          return try ProtobufUnittest.RawMessageSet.Item.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> ProtobufUnittest.RawMessageSet.Item {
          return try ProtobufUnittest.RawMessageSet.Item.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestMsetRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.RawMessageSet.Item {
          return try ProtobufUnittest.RawMessageSet.Item.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.RawMessageSet.Item {
          return try ProtobufUnittest.RawMessageSet.Item.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.RawMessageSet.Item {
          return try ProtobufUnittest.RawMessageSet.Item.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.RawMessageSet.Item {
          return try ProtobufUnittest.RawMessageSet.Item.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.RawMessageSet.Item {
          return try ProtobufUnittest.RawMessageSet.Item.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> ProtobufUnittest.RawMessageSet.Item.Builder {
          return ProtobufUnittest.RawMessageSet.Item.classBuilder() as! ProtobufUnittest.RawMessageSet.Item.Builder
        }
        public func getBuilder() -> ProtobufUnittest.RawMessageSet.Item.Builder {
          return classBuilder() as! ProtobufUnittest.RawMessageSet.Item.Builder
        }
        override public class func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.RawMessageSet.Item.Builder()
        }
        override public func classBuilder() -> MessageBuilder {
          return ProtobufUnittest.RawMessageSet.Item.Builder()
        }
        public func toBuilder() throws -> ProtobufUnittest.RawMessageSet.Item.Builder {
          return try ProtobufUnittest.RawMessageSet.Item.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:ProtobufUnittest.RawMessageSet.Item) throws -> ProtobufUnittest.RawMessageSet.Item.Builder {
          return try ProtobufUnittest.RawMessageSet.Item.Builder().mergeFrom(prototype)
        }
        override public func encode() throws -> Dictionary<String,AnyObject> {
          guard isInitialized() else {
            throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
          }

          var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
          if hasTypeId {
            jsonMap["typeId"] = NSNumber(int:typeId)
          }
          if hasMessage_ {
            jsonMap["message"] = message_.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
          }
          return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.RawMessageSet.Item {
          return try ProtobufUnittest.RawMessageSet.Item.Builder.decodeToBuilder(jsonMap).build()
        }
        override class public func fromJSON(data:NSData) throws -> ProtobufUnittest.RawMessageSet.Item {
          return try ProtobufUnittest.RawMessageSet.Item.Builder.fromJSONToBuilder(data).build()
        }
        override public func getDescription(indent:String) throws -> String {
          var output = ""
          if hasTypeId {
            output += "\(indent) typeId: \(typeId) \n"
          }
          if hasMessage_ {
            output += "\(indent) message_: \(message_) \n"
          }
          output += unknownFields.getDescription(indent)
          return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasTypeId {
                   hashCode = (hashCode &* 31) &+ typeId.hashValue
                }
                if hasMessage_ {
                   hashCode = (hashCode &* 31) &+ message_.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "ProtobufUnittest.RawMessageSet.Item"
        }
        override public func className() -> String {
            return "ProtobufUnittest.RawMessageSet.Item"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return ProtobufUnittest.RawMessageSet.Item.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:ProtobufUnittest.RawMessageSet.Item = ProtobufUnittest.RawMessageSet.Item()
          public func getMessage() -> ProtobufUnittest.RawMessageSet.Item {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasTypeId:Bool {
               get {
                    return builderResult.hasTypeId
               }
          }
          public var typeId:Int32 {
               get {
                    return builderResult.typeId
               }
               set (value) {
                   builderResult.hasTypeId = true
                   builderResult.typeId = value
               }
          }
          public func setTypeId(value:Int32) -> ProtobufUnittest.RawMessageSet.Item.Builder {
            self.typeId = value
            return self
          }
          public func clearTypeId() -> ProtobufUnittest.RawMessageSet.Item.Builder{
               builderResult.hasTypeId = false
               builderResult.typeId = Int32(0)
               return self
          }
          public var hasMessage_:Bool {
               get {
                    return builderResult.hasMessage_
               }
          }
          public var message_:NSData {
               get {
                    return builderResult.message_
               }
               set (value) {
                   builderResult.hasMessage_ = true
                   builderResult.message_ = value
               }
          }
          public func setMessage_(value:NSData) -> ProtobufUnittest.RawMessageSet.Item.Builder {
            self.message_ = value
            return self
          }
          public func clearMessage_() -> ProtobufUnittest.RawMessageSet.Item.Builder{
               builderResult.hasMessage_ = false
               builderResult.message_ = NSData()
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          override public func clear() -> ProtobufUnittest.RawMessageSet.Item.Builder {
            builderResult = ProtobufUnittest.RawMessageSet.Item()
            return self
          }
          override public func clone() throws -> ProtobufUnittest.RawMessageSet.Item.Builder {
            return try ProtobufUnittest.RawMessageSet.Item.builderWithPrototype(builderResult)
          }
          override public func build() throws -> ProtobufUnittest.RawMessageSet.Item {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProtobufUnittest.RawMessageSet.Item {
            let returnMe:ProtobufUnittest.RawMessageSet.Item = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProtobufUnittest.RawMessageSet.Item) throws -> ProtobufUnittest.RawMessageSet.Item.Builder {
            if other == ProtobufUnittest.RawMessageSet.Item() {
             return self
            }
            if other.hasTypeId {
                 typeId = other.typeId
            }
            if other.hasMessage_ {
                 message_ = other.message_
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.RawMessageSet.Item.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.RawMessageSet.Item.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let protobufTag = try input.readTag()
              switch protobufTag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 16 :
                typeId = try input.readInt32()

              case 26 :
                message_ = try input.readData()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
          override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.RawMessageSet.Item.Builder {
            let resultDecodedBuilder = ProtobufUnittest.RawMessageSet.Item.Builder()
            if let jsonValueTypeId = jsonMap["typeId"] as? NSNumber {
              resultDecodedBuilder.typeId = jsonValueTypeId.intValue
            }
            if let jsonValueMessage_ = jsonMap["message"] as? String {
              resultDecodedBuilder.message_ = NSData(base64EncodedString:jsonValueMessage_, options: NSDataBase64DecodingOptions(rawValue:0))!
            }
            return resultDecodedBuilder
          }
          override class public func fromJSONToBuilder(data:NSData) throws -> ProtobufUnittest.RawMessageSet.Item.Builder {
            let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
              throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
            }
            return try ProtobufUnittest.RawMessageSet.Item.Builder.decodeToBuilder(jsDataCast)
          }
        }

      }

    //Nested type declaration end

    public private(set) var item:Array<ProtobufUnittest.RawMessageSet.Item>  = Array<ProtobufUnittest.RawMessageSet.Item>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      var isInitItem:Bool = true
      for oneElementItem in item {
        if !oneElementItem.isInitialized() {
          isInitItem = false
          break 
        }
      }
      if !isInitItem {
        return isInitItem
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementItem in item {
          try output.writeGroup(1, value:oneElementItem)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementItem in item {
          serialize_size += oneElementItem.computeGroupSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtobufUnittest.RawMessageSet> {
      var mergedArray = Array<ProtobufUnittest.RawMessageSet>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.RawMessageSet? {
      return try ProtobufUnittest.RawMessageSet.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ProtobufUnittest.RawMessageSet {
      return try ProtobufUnittest.RawMessageSet.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestMsetRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.RawMessageSet {
      return try ProtobufUnittest.RawMessageSet.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.RawMessageSet {
      return try ProtobufUnittest.RawMessageSet.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.RawMessageSet {
      return try ProtobufUnittest.RawMessageSet.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.RawMessageSet {
      return try ProtobufUnittest.RawMessageSet.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.RawMessageSet {
      return try ProtobufUnittest.RawMessageSet.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.RawMessageSet.Builder {
      return ProtobufUnittest.RawMessageSet.classBuilder() as! ProtobufUnittest.RawMessageSet.Builder
    }
    public func getBuilder() -> ProtobufUnittest.RawMessageSet.Builder {
      return classBuilder() as! ProtobufUnittest.RawMessageSet.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.RawMessageSet.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.RawMessageSet.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.RawMessageSet.Builder {
      return try ProtobufUnittest.RawMessageSet.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ProtobufUnittest.RawMessageSet) throws -> ProtobufUnittest.RawMessageSet.Builder {
      return try ProtobufUnittest.RawMessageSet.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !item.isEmpty {
        var jsonArrayItem:Array<Dictionary<String,AnyObject>> = []
          for oneValueItem in item {
            let ecodedMessageItem = try oneValueItem.encode()
            jsonArrayItem += [ecodedMessageItem]
          }
        jsonMap["item"] = jsonArrayItem
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.RawMessageSet {
      return try ProtobufUnittest.RawMessageSet.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> ProtobufUnittest.RawMessageSet {
      return try ProtobufUnittest.RawMessageSet.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var itemElementIndex:Int = 0
      for oneElementItem in item {
          output += "\(indent) item[\(itemElementIndex)] {\n"
          output += try oneElementItem.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          itemElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementItem in item {
                hashCode = (hashCode &* 31) &+ oneElementItem.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.RawMessageSet"
    }
    override public func className() -> String {
        return "ProtobufUnittest.RawMessageSet"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.RawMessageSet.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.RawMessageSet = ProtobufUnittest.RawMessageSet()
      public func getMessage() -> ProtobufUnittest.RawMessageSet {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var item:Array<ProtobufUnittest.RawMessageSet.Item> {
           get {
               return builderResult.item
           }
           set (value) {
               builderResult.item = value
           }
      }
      public func setItem(value:Array<ProtobufUnittest.RawMessageSet.Item>) -> ProtobufUnittest.RawMessageSet.Builder {
        self.item = value
        return self
      }
      public func clearItem() -> ProtobufUnittest.RawMessageSet.Builder {
        builderResult.item.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> ProtobufUnittest.RawMessageSet.Builder {
        builderResult = ProtobufUnittest.RawMessageSet()
        return self
      }
      override public func clone() throws -> ProtobufUnittest.RawMessageSet.Builder {
        return try ProtobufUnittest.RawMessageSet.builderWithPrototype(builderResult)
      }
      override public func build() throws -> ProtobufUnittest.RawMessageSet {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.RawMessageSet {
        let returnMe:ProtobufUnittest.RawMessageSet = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProtobufUnittest.RawMessageSet) throws -> ProtobufUnittest.RawMessageSet.Builder {
        if other == ProtobufUnittest.RawMessageSet() {
         return self
        }
        if !other.item.isEmpty  {
           builderResult.item += other.item
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.RawMessageSet.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.RawMessageSet.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 11 :
            let subBuilder = ProtobufUnittest.RawMessageSet.Item.Builder()
            try input.readGroup(1,builder:subBuilder,extensionRegistry:extensionRegistry)
            item += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.RawMessageSet.Builder {
        let resultDecodedBuilder = ProtobufUnittest.RawMessageSet.Builder()
        if let jsonValueItem = jsonMap["item"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayItem:Array<ProtobufUnittest.RawMessageSet.Item> = []
          for oneValueItem in jsonValueItem {
            let messageFromStringItem = try ProtobufUnittest.RawMessageSet.Item.Builder.decodeToBuilder(oneValueItem).build()

            jsonArrayItem += [messageFromStringItem]
          }
          resultDecodedBuilder.item = jsonArrayItem
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> ProtobufUnittest.RawMessageSet.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try ProtobufUnittest.RawMessageSet.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
