// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "unittest_embed_optimize_for.proto"
// Syntax "Proto2"

import Foundation
import ProtocolBuffers

public extension ProtobufUnittest{}

public func == (lhs: ProtobufUnittest.TestEmbedOptimizedForSize, rhs: ProtobufUnittest.TestEmbedOptimizedForSize) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOptionalMessage == rhs.hasOptionalMessage) && (!lhs.hasOptionalMessage || lhs.optionalMessage == rhs.optionalMessage)
  fieldCheck = fieldCheck && (lhs.repeatedMessage == rhs.repeatedMessage)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension ProtobufUnittest {
  public struct UnittestEmbedOptimizeForRoot {
    public static var sharedInstance : UnittestEmbedOptimizeForRoot {
     struct Static {
         static let instance : UnittestEmbedOptimizeForRoot = UnittestEmbedOptimizeForRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      ProtobufUnittest.UnittestOptimizeForRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class TestEmbedOptimizedForSize : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasOptionalMessage:Bool = false
    public private(set) var optionalMessage:ProtobufUnittest.TestOptimizedForSize!
    public private(set) var repeatedMessage:Array<ProtobufUnittest.TestOptimizedForSize>  = Array<ProtobufUnittest.TestOptimizedForSize>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
      if hasOptionalMessage {
       if !optionalMessage.isInitialized() {
         return false
       }
      }
      var isInitRepeatedMessage:Bool = true
      for oneElementRepeatedMessage in repeatedMessage {
        if !oneElementRepeatedMessage.isInitialized() {
          isInitRepeatedMessage = false
          break 
        }
      }
      if !isInitRepeatedMessage {
        return isInitRepeatedMessage
      }
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasOptionalMessage {
        try output.writeMessage(1, value:optionalMessage)
      }
      for oneElementRepeatedMessage in repeatedMessage {
          try output.writeMessage(2, value:oneElementRepeatedMessage)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasOptionalMessage {
          if let varSizeoptionalMessage = optionalMessage?.computeMessageSize(1) {
              serialize_size += varSizeoptionalMessage
          }
      }
      for oneElementRepeatedMessage in repeatedMessage {
          serialize_size += oneElementRepeatedMessage.computeMessageSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<ProtobufUnittest.TestEmbedOptimizedForSize> {
      var mergedArray = Array<ProtobufUnittest.TestEmbedOptimizedForSize>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.TestEmbedOptimizedForSize? {
      return try ProtobufUnittest.TestEmbedOptimizedForSize.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> ProtobufUnittest.TestEmbedOptimizedForSize {
      return try ProtobufUnittest.TestEmbedOptimizedForSize.Builder().mergeFromData(data, extensionRegistry:ProtobufUnittest.UnittestEmbedOptimizeForRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEmbedOptimizedForSize {
      return try ProtobufUnittest.TestEmbedOptimizedForSize.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> ProtobufUnittest.TestEmbedOptimizedForSize {
      return try ProtobufUnittest.TestEmbedOptimizedForSize.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEmbedOptimizedForSize {
      return try ProtobufUnittest.TestEmbedOptimizedForSize.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.TestEmbedOptimizedForSize {
      return try ProtobufUnittest.TestEmbedOptimizedForSize.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEmbedOptimizedForSize {
      return try ProtobufUnittest.TestEmbedOptimizedForSize.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
      return ProtobufUnittest.TestEmbedOptimizedForSize.classBuilder() as! ProtobufUnittest.TestEmbedOptimizedForSize.Builder
    }
    public func getBuilder() -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
      return classBuilder() as! ProtobufUnittest.TestEmbedOptimizedForSize.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEmbedOptimizedForSize.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return ProtobufUnittest.TestEmbedOptimizedForSize.Builder()
    }
    public func toBuilder() throws -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
      return try ProtobufUnittest.TestEmbedOptimizedForSize.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:ProtobufUnittest.TestEmbedOptimizedForSize) throws -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
      return try ProtobufUnittest.TestEmbedOptimizedForSize.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasOptionalMessage {
        jsonMap["optionalMessage"] = try optionalMessage.encode()
      }
      if !repeatedMessage.isEmpty {
        var jsonArrayRepeatedMessage:Array<Dictionary<String,AnyObject>> = []
          for oneValueRepeatedMessage in repeatedMessage {
            let ecodedMessageRepeatedMessage = try oneValueRepeatedMessage.encode()
            jsonArrayRepeatedMessage += [ecodedMessageRepeatedMessage]
          }
        jsonMap["repeatedMessage"] = jsonArrayRepeatedMessage
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.TestEmbedOptimizedForSize {
      return try ProtobufUnittest.TestEmbedOptimizedForSize.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> ProtobufUnittest.TestEmbedOptimizedForSize {
      return try ProtobufUnittest.TestEmbedOptimizedForSize.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasOptionalMessage {
        output += "\(indent) optionalMessage {\n"
        if let outDescOptionalMessage = optionalMessage {
          output += try outDescOptionalMessage.getDescription("\(indent)  ")
        }
        output += "\(indent) }\n"
      }
      var repeatedMessageElementIndex:Int = 0
      for oneElementRepeatedMessage in repeatedMessage {
          output += "\(indent) repeatedMessage[\(repeatedMessageElementIndex)] {\n"
          output += try oneElementRepeatedMessage.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          repeatedMessageElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOptionalMessage {
                if let hashValueoptionalMessage = optionalMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoptionalMessage
                }
            }
            for oneElementRepeatedMessage in repeatedMessage {
                hashCode = (hashCode &* 31) &+ oneElementRepeatedMessage.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ProtobufUnittest.TestEmbedOptimizedForSize"
    }
    override public func className() -> String {
        return "ProtobufUnittest.TestEmbedOptimizedForSize"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return ProtobufUnittest.TestEmbedOptimizedForSize.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:ProtobufUnittest.TestEmbedOptimizedForSize = ProtobufUnittest.TestEmbedOptimizedForSize()
      public func getMessage() -> ProtobufUnittest.TestEmbedOptimizedForSize {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasOptionalMessage:Bool {
           get {
               return builderResult.hasOptionalMessage
           }
      }
      public var optionalMessage:ProtobufUnittest.TestOptimizedForSize! {
           get {
               if optionalMessageBuilder_ != nil {
                  builderResult.optionalMessage = optionalMessageBuilder_.getMessage()
               }
               return builderResult.optionalMessage
           }
           set (value) {
               builderResult.hasOptionalMessage = true
               builderResult.optionalMessage = value
           }
      }
      private var optionalMessageBuilder_:ProtobufUnittest.TestOptimizedForSize.Builder! {
           didSet {
              builderResult.hasOptionalMessage = true
           }
      }
      public func getOptionalMessageBuilder() -> ProtobufUnittest.TestOptimizedForSize.Builder {
        if optionalMessageBuilder_ == nil {
           optionalMessageBuilder_ = ProtobufUnittest.TestOptimizedForSize.Builder()
           builderResult.optionalMessage = optionalMessageBuilder_.getMessage()
           if optionalMessage != nil {
              try! optionalMessageBuilder_.mergeFrom(optionalMessage)
           }
        }
        return optionalMessageBuilder_
      }
      public func setOptionalMessage(value:ProtobufUnittest.TestOptimizedForSize!) -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
        self.optionalMessage = value
        return self
      }
      public func mergeOptionalMessage(value:ProtobufUnittest.TestOptimizedForSize) throws -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
        if builderResult.hasOptionalMessage {
          builderResult.optionalMessage = try ProtobufUnittest.TestOptimizedForSize.builderWithPrototype(builderResult.optionalMessage).mergeFrom(value).buildPartial()
        } else {
          builderResult.optionalMessage = value
        }
        builderResult.hasOptionalMessage = true
        return self
      }
      public func clearOptionalMessage() -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
        optionalMessageBuilder_ = nil
        builderResult.hasOptionalMessage = false
        builderResult.optionalMessage = nil
        return self
      }
      public var repeatedMessage:Array<ProtobufUnittest.TestOptimizedForSize> {
           get {
               return builderResult.repeatedMessage
           }
           set (value) {
               builderResult.repeatedMessage = value
           }
      }
      public func setRepeatedMessage(value:Array<ProtobufUnittest.TestOptimizedForSize>) -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
        self.repeatedMessage = value
        return self
      }
      public func clearRepeatedMessage() -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
        builderResult.repeatedMessage.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
        builderResult = ProtobufUnittest.TestEmbedOptimizedForSize()
        return self
      }
      override public func clone() throws -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
        return try ProtobufUnittest.TestEmbedOptimizedForSize.builderWithPrototype(builderResult)
      }
      override public func build() throws -> ProtobufUnittest.TestEmbedOptimizedForSize {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProtobufUnittest.TestEmbedOptimizedForSize {
        let returnMe:ProtobufUnittest.TestEmbedOptimizedForSize = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProtobufUnittest.TestEmbedOptimizedForSize) throws -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
        if other == ProtobufUnittest.TestEmbedOptimizedForSize() {
         return self
        }
        if (other.hasOptionalMessage) {
            try mergeOptionalMessage(other.optionalMessage)
        }
        if !other.repeatedMessage.isEmpty  {
           builderResult.repeatedMessage += other.repeatedMessage
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10:
            let subBuilder:ProtobufUnittest.TestOptimizedForSize.Builder = ProtobufUnittest.TestOptimizedForSize.Builder()
            if hasOptionalMessage {
              try subBuilder.mergeFrom(optionalMessage)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            optionalMessage = subBuilder.buildPartial()

          case 18:
            let subBuilder = ProtobufUnittest.TestOptimizedForSize.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedMessage += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
        let resultDecodedBuilder = ProtobufUnittest.TestEmbedOptimizedForSize.Builder()
        if let jsonValueOptionalMessage = jsonMap["optionalMessage"] as? Dictionary<String,AnyObject> {
          resultDecodedBuilder.optionalMessage = try ProtobufUnittest.TestOptimizedForSize.Builder.decodeToBuilder(jsonValueOptionalMessage).build()

        }
        if let jsonValueRepeatedMessage = jsonMap["repeatedMessage"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayRepeatedMessage:Array<ProtobufUnittest.TestOptimizedForSize> = []
          for oneValueRepeatedMessage in jsonValueRepeatedMessage {
            let messageFromStringRepeatedMessage = try ProtobufUnittest.TestOptimizedForSize.Builder.decodeToBuilder(oneValueRepeatedMessage).build()

            jsonArrayRepeatedMessage += [messageFromStringRepeatedMessage]
          }
          resultDecodedBuilder.repeatedMessage = jsonArrayRepeatedMessage
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> ProtobufUnittest.TestEmbedOptimizedForSize.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try ProtobufUnittest.TestEmbedOptimizedForSize.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
