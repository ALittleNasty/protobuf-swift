// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "unittest_preserve_unknown_enum.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


internal struct Proto3PreserveUnknownEnumUnittest { }

internal func == (lhs: Proto3PreserveUnknownEnumUnittest.MyMessage, rhs: Proto3PreserveUnknownEnumUnittest.MyMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasE == rhs.hasE) && (!lhs.hasE || lhs.e == rhs.e)
  fieldCheck = fieldCheck && (lhs.repeatedE == rhs.repeatedE)
  fieldCheck = fieldCheck && (lhs.repeatedPackedE == rhs.repeatedPackedE)
  fieldCheck = fieldCheck && (lhs.repeatedPackedUnexpectedE == rhs.repeatedPackedUnexpectedE)
  fieldCheck = fieldCheck && (lhs.hasOneofE1 == rhs.hasOneofE1) && (!lhs.hasOneofE1 || lhs.oneofE1 == rhs.oneofE1)
  fieldCheck = fieldCheck && (lhs.hasOneofE2 == rhs.hasOneofE2) && (!lhs.hasOneofE2 || lhs.oneofE2 == rhs.oneofE2)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal func == (lhs: Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra, rhs: Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasE == rhs.hasE) && (!lhs.hasE || lhs.e == rhs.e)
  fieldCheck = fieldCheck && (lhs.repeatedE == rhs.repeatedE)
  fieldCheck = fieldCheck && (lhs.repeatedPackedE == rhs.repeatedPackedE)
  fieldCheck = fieldCheck && (lhs.repeatedPackedUnexpectedE == rhs.repeatedPackedUnexpectedE)
  fieldCheck = fieldCheck && (lhs.hasOneofE1 == rhs.hasOneofE1) && (!lhs.hasOneofE1 || lhs.oneofE1 == rhs.oneofE1)
  fieldCheck = fieldCheck && (lhs.hasOneofE2 == rhs.hasOneofE2) && (!lhs.hasOneofE2 || lhs.oneofE2 == rhs.oneofE2)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal extension Proto3PreserveUnknownEnumUnittest {
  internal struct UnittestPreserveUnknownEnumRoot {
    internal static var sharedInstance : UnittestPreserveUnknownEnumRoot {
     struct Static {
         static let instance : UnittestPreserveUnknownEnumRoot = UnittestPreserveUnknownEnumRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  internal enum MyEnum:Int32 {
    case Foo = 0
    case Bar = 1
    case Baz = 2
    internal func toString() -> String {
      switch self {
      case .Foo: return "FOO"
      case .Bar: return "BAR"
      case .Baz: return "BAZ"
      }
    }
    internal static func fromString(str:String) throws -> Proto3PreserveUnknownEnumUnittest.MyEnum {
      switch str {
      case "FOO":  return .Foo
      case "BAR":  return .Bar
      case "BAZ":  return .Baz
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
  }

  //Enum type declaration end 



  //Enum type declaration start 

  internal enum MyEnumPlusExtra:Int32 {
    case EFoo = 0
    case EBar = 1
    case EBaz = 2
    case EExtra = 3
    internal func toString() -> String {
      switch self {
      case .EFoo: return "E_FOO"
      case .EBar: return "E_BAR"
      case .EBaz: return "E_BAZ"
      case .EExtra: return "E_EXTRA"
      }
    }
    internal static func fromString(str:String) throws -> Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra {
      switch str {
      case "E_FOO":  return .EFoo
      case "E_BAR":  return .EBar
      case "E_BAZ":  return .EBaz
      case "E_EXTRA":  return .EExtra
      default: throw ProtocolBuffersError.InvalidProtocolBuffer("Conversion String to Enum has failed.")
      }
    }
  }

  //Enum type declaration end 

  final internal class MyMessage : GeneratedMessage, GeneratedMessageProtocol {


    //OneOf declaration start

    internal enum O {
      case OOneOfNotSet

      internal func checkOneOfIsSet() -> Bool {
           switch self {
           case .OOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case OneofE1(Proto3PreserveUnknownEnumUnittest.MyEnum)

      internal static func getOneofE1(value:O) -> Proto3PreserveUnknownEnumUnittest.MyEnum? {
           switch value {
           case .OneofE1(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofE2(Proto3PreserveUnknownEnumUnittest.MyEnum)

      internal static func getOneofE2(value:O) -> Proto3PreserveUnknownEnumUnittest.MyEnum? {
           switch value {
           case .OneofE2(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageO:MyMessage.O =  MyMessage.O.OOneOfNotSet
    private(set) var e:Proto3PreserveUnknownEnumUnittest.MyEnum = Proto3PreserveUnknownEnumUnittest.MyEnum.Foo
    private(set) var hasE:Bool = false
    private var repeatedEMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnum> = Array<Proto3PreserveUnknownEnumUnittest.MyEnum>()
    private var repeatedPackedEMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedPackedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnum> = Array<Proto3PreserveUnknownEnumUnittest.MyEnum>()
    private var repeatedPackedUnexpectedEMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedPackedUnexpectedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra> = Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra>()
    private(set) var hasOneofE1:Bool {
          get {
               if MyMessage.O.getOneofE1(storageO) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofE1:Proto3PreserveUnknownEnumUnittest.MyEnum!{
         get {
              return MyMessage.O.getOneofE1(storageO)
         }
         set (newvalue) {
              storageO = MyMessage.O.OneofE1(newvalue)
         }
    }
    private(set) var hasOneofE2:Bool {
          get {
               if MyMessage.O.getOneofE2(storageO) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofE2:Proto3PreserveUnknownEnumUnittest.MyEnum!{
         get {
              return MyMessage.O.getOneofE2(storageO)
         }
         set (newvalue) {
              storageO = MyMessage.O.OneofE2(newvalue)
         }
    }
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasE {
        try output.writeEnum(1, value:e.rawValue)
      }
      for oneValueOfrepeatedE in repeatedE {
          try output.writeEnum(2, value:oneValueOfrepeatedE.rawValue)
      }
      if !repeatedPackedE.isEmpty {
        try output.writeRawVarint32(26)
        try output.writeRawVarint32(repeatedPackedEMemoizedSerializedSize)
      }
      for oneValueOfrepeatedPackedE in repeatedPackedE {
          try output.writeEnumNoTag(oneValueOfrepeatedPackedE.rawValue)
      }
      for oneValueOfrepeatedPackedUnexpectedE in repeatedPackedUnexpectedE {
          try output.writeEnum(4, value:oneValueOfrepeatedPackedUnexpectedE.rawValue)
      }
      if hasOneofE1 {
        try output.writeEnum(5, value:oneofE1.rawValue)
      }
      if hasOneofE2 {
        try output.writeEnum(6, value:oneofE2.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasE) {
        serialize_size += e.rawValue.computeEnumSize(1)
      }
      var dataSizerepeatedE:Int32 = 0
      for oneValueOfrepeatedE in repeatedE {
          dataSizerepeatedE += oneValueOfrepeatedE.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedE
      serialize_size += (1 * Int32(repeatedE.count))
      var dataSizerepeatedPackedE:Int32 = 0
      for oneValueOfrepeatedPackedE in repeatedPackedE {
          dataSizerepeatedPackedE += oneValueOfrepeatedPackedE.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedPackedE
      if !repeatedPackedE.isEmpty {
        serialize_size += 1
        serialize_size += dataSizerepeatedPackedE.computeRawVarint32Size()
      }
      repeatedPackedEMemoizedSerializedSize = dataSizerepeatedPackedE
      var dataSizerepeatedPackedUnexpectedE:Int32 = 0
      for oneValueOfrepeatedPackedUnexpectedE in repeatedPackedUnexpectedE {
          dataSizerepeatedPackedUnexpectedE += oneValueOfrepeatedPackedUnexpectedE.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedPackedUnexpectedE
      serialize_size += (1 * Int32(repeatedPackedUnexpectedE.count))
      if (hasOneofE1) {
        serialize_size += oneofE1.rawValue.computeEnumSize(5)
      }
      if (hasOneofE2) {
        serialize_size += oneofE2.rawValue.computeEnumSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Proto3PreserveUnknownEnumUnittest.MyMessage> {
      var mergedArray = Array<Proto3PreserveUnknownEnumUnittest.MyMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage? {
      return try Proto3PreserveUnknownEnumUnittest.MyMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    internal class func parseFromData(data:NSData) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage {
      return try Proto3PreserveUnknownEnumUnittest.MyMessage.Builder().mergeFromData(data, extensionRegistry:Proto3PreserveUnknownEnumUnittest.UnittestPreserveUnknownEnumRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage {
      return try Proto3PreserveUnknownEnumUnittest.MyMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage {
      return try Proto3PreserveUnknownEnumUnittest.MyMessage.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage {
      return try Proto3PreserveUnknownEnumUnittest.MyMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage {
      return try Proto3PreserveUnknownEnumUnittest.MyMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage {
      return try Proto3PreserveUnknownEnumUnittest.MyMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
      return Proto3PreserveUnknownEnumUnittest.MyMessage.classBuilder() as! Proto3PreserveUnknownEnumUnittest.MyMessage.Builder
    }
    internal func getBuilder() -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
      return classBuilder() as! Proto3PreserveUnknownEnumUnittest.MyMessage.Builder
    }
    override internal class func classBuilder() -> MessageBuilder {
      return Proto3PreserveUnknownEnumUnittest.MyMessage.Builder()
    }
    override internal func classBuilder() -> MessageBuilder {
      return Proto3PreserveUnknownEnumUnittest.MyMessage.Builder()
    }
    internal func toBuilder() throws -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
      return try Proto3PreserveUnknownEnumUnittest.MyMessage.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Proto3PreserveUnknownEnumUnittest.MyMessage) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
      return try Proto3PreserveUnknownEnumUnittest.MyMessage.Builder().mergeFrom(prototype)
    }
    override internal func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasE {
        jsonMap["e"] = e.toString()
      }
      if !repeatedE.isEmpty {
        var jsonArrayRepeatedE:Array<String> = []
          for oneValueRepeatedE in repeatedE {
            jsonArrayRepeatedE += [oneValueRepeatedE.toString()]
          }
        jsonMap["repeatedE"] = jsonArrayRepeatedE
      }
      if !repeatedPackedE.isEmpty {
        var jsonArrayRepeatedPackedE:Array<String> = []
          for oneValueRepeatedPackedE in repeatedPackedE {
            jsonArrayRepeatedPackedE += [oneValueRepeatedPackedE.toString()]
          }
        jsonMap["repeatedPackedE"] = jsonArrayRepeatedPackedE
      }
      if !repeatedPackedUnexpectedE.isEmpty {
        var jsonArrayRepeatedPackedUnexpectedE:Array<String> = []
          for oneValueRepeatedPackedUnexpectedE in repeatedPackedUnexpectedE {
            jsonArrayRepeatedPackedUnexpectedE += [oneValueRepeatedPackedUnexpectedE.toString()]
          }
        jsonMap["repeatedPackedUnexpectedE"] = jsonArrayRepeatedPackedUnexpectedE
      }
      if hasOneofE1 {
        jsonMap["oneofE1"] = oneofE1.toString()
      }
      if hasOneofE2 {
        jsonMap["oneofE2"] = oneofE2.toString()
      }
      return jsonMap
    }
    override class internal func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage {
      return try Proto3PreserveUnknownEnumUnittest.MyMessage.Builder.decodeToBuilder(jsonMap).build()
    }
    override class internal func fromJSON(data:NSData) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage {
      return try Proto3PreserveUnknownEnumUnittest.MyMessage.Builder.fromJSONToBuilder(data).build()
    }
    override internal func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasE) {
        output += "\(indent) e: \(e.rawValue)\n"
      }
      var repeatedEElementIndex:Int = 0
      for oneValueOfrepeatedE in repeatedE {
          output += "\(indent) repeatedE[\(repeatedEElementIndex)]: \(oneValueOfrepeatedE.rawValue)\n"
          repeatedEElementIndex++
      }
      var repeatedPackedEElementIndex:Int = 0
      for oneValueOfrepeatedPackedE in repeatedPackedE {
          output += "\(indent) repeatedPackedE[\(repeatedPackedEElementIndex)]: \(oneValueOfrepeatedPackedE.rawValue)\n"
          repeatedPackedEElementIndex++
      }
      var repeatedPackedUnexpectedEElementIndex:Int = 0
      for oneValueOfrepeatedPackedUnexpectedE in repeatedPackedUnexpectedE {
          output += "\(indent) repeatedPackedUnexpectedE[\(repeatedPackedUnexpectedEElementIndex)]: \(oneValueOfrepeatedPackedUnexpectedE.rawValue)\n"
          repeatedPackedUnexpectedEElementIndex++
      }
      if (hasOneofE1) {
        output += "\(indent) oneofE1: \(oneofE1.rawValue)\n"
      }
      if (hasOneofE2) {
        output += "\(indent) oneofE2: \(oneofE2.rawValue)\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasE {
               hashCode = (hashCode &* 31) &+ Int(e.rawValue)
            }
            for oneValueOfrepeatedE in repeatedE {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedE.rawValue)
            }
            for oneValueOfrepeatedPackedE in repeatedPackedE {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedPackedE.rawValue)
            }
            for oneValueOfrepeatedPackedUnexpectedE in repeatedPackedUnexpectedE {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedPackedUnexpectedE.rawValue)
            }
            if hasOneofE1 {
               hashCode = (hashCode &* 31) &+ Int(oneofE1.rawValue)
            }
            if hasOneofE2 {
               hashCode = (hashCode &* 31) &+ Int(oneofE2.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Proto3PreserveUnknownEnumUnittest.MyMessage"
    }
    override internal func className() -> String {
        return "Proto3PreserveUnknownEnumUnittest.MyMessage"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Proto3PreserveUnknownEnumUnittest.MyMessage.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:Proto3PreserveUnknownEnumUnittest.MyMessage = Proto3PreserveUnknownEnumUnittest.MyMessage()
      internal func getMessage() -> Proto3PreserveUnknownEnumUnittest.MyMessage {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
        var hasE:Bool{
            get {
                return builderResult.hasE
            }
        }
        var e:Proto3PreserveUnknownEnumUnittest.MyEnum {
            get {
                return builderResult.e
            }
            set (value) {
                builderResult.hasE = true
                builderResult.e = value
            }
        }
        internal func setE(value:Proto3PreserveUnknownEnumUnittest.MyEnum) -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
          self.e = value
          return self
        }
        internal func clearE() -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
           builderResult.hasE = false
           builderResult.e = .Foo
           return self
        }
      var repeatedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnum> {
          get {
              return builderResult.repeatedE
          }
          set (value) {
              builderResult.repeatedE = value
          }
      }
      func setRepeatedE(value:Array<Proto3PreserveUnknownEnumUnittest.MyEnum>) -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
        self.repeatedE = value
        return self
      }
      internal func clearRepeatedE() -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
        builderResult.repeatedE.removeAll(keepCapacity: false)
        return self
      }
      var repeatedPackedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnum> {
          get {
              return builderResult.repeatedPackedE
          }
          set (value) {
              builderResult.repeatedPackedE = value
          }
      }
      func setRepeatedPackedE(value:Array<Proto3PreserveUnknownEnumUnittest.MyEnum>) -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
        self.repeatedPackedE = value
        return self
      }
      internal func clearRepeatedPackedE() -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
        builderResult.repeatedPackedE.removeAll(keepCapacity: false)
        return self
      }
      var repeatedPackedUnexpectedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra> {
          get {
              return builderResult.repeatedPackedUnexpectedE
          }
          set (value) {
              builderResult.repeatedPackedUnexpectedE = value
          }
      }
      func setRepeatedPackedUnexpectedE(value:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra>) -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
        self.repeatedPackedUnexpectedE = value
        return self
      }
      internal func clearRepeatedPackedUnexpectedE() -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
        builderResult.repeatedPackedUnexpectedE.removeAll(keepCapacity: false)
        return self
      }
        var hasOneofE1:Bool{
            get {
                return builderResult.hasOneofE1
            }
        }
        var oneofE1:Proto3PreserveUnknownEnumUnittest.MyEnum {
            get {
                return builderResult.oneofE1
            }
            set (value) {
                builderResult.hasOneofE1 = true
                builderResult.oneofE1 = value
            }
        }
        internal func setOneofE1(value:Proto3PreserveUnknownEnumUnittest.MyEnum) -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
          self.oneofE1 = value
          return self
        }
        internal func clearOneofE1() -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
           builderResult.hasOneofE1 = false
           builderResult.oneofE1 = .Foo
           return self
        }
        var hasOneofE2:Bool{
            get {
                return builderResult.hasOneofE2
            }
        }
        var oneofE2:Proto3PreserveUnknownEnumUnittest.MyEnum {
            get {
                return builderResult.oneofE2
            }
            set (value) {
                builderResult.hasOneofE2 = true
                builderResult.oneofE2 = value
            }
        }
        internal func setOneofE2(value:Proto3PreserveUnknownEnumUnittest.MyEnum) -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
          self.oneofE2 = value
          return self
        }
        internal func clearOneofE2() -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
           builderResult.hasOneofE2 = false
           builderResult.oneofE2 = .Foo
           return self
        }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override internal func clear() -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
        builderResult = Proto3PreserveUnknownEnumUnittest.MyMessage()
        return self
      }
      override internal func clone() throws -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
        return try Proto3PreserveUnknownEnumUnittest.MyMessage.builderWithPrototype(builderResult)
      }
      override internal func build() throws -> Proto3PreserveUnknownEnumUnittest.MyMessage {
           try checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> Proto3PreserveUnknownEnumUnittest.MyMessage {
        let returnMe:Proto3PreserveUnknownEnumUnittest.MyMessage = builderResult
        return returnMe
      }
      internal func mergeFrom(other:Proto3PreserveUnknownEnumUnittest.MyMessage) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
        if other == Proto3PreserveUnknownEnumUnittest.MyMessage() {
         return self
        }
        if other.hasE {
             e = other.e
        }
        if !other.repeatedE.isEmpty {
           builderResult.repeatedE += other.repeatedE
        }
        if !other.repeatedPackedE.isEmpty {
           builderResult.repeatedPackedE += other.repeatedPackedE
        }
        if !other.repeatedPackedUnexpectedE.isEmpty {
           builderResult.repeatedPackedUnexpectedE += other.repeatedPackedUnexpectedE
        }
        if other.hasOneofE1 {
             oneofE1 = other.oneofE1
        }
        if other.hasOneofE2 {
             oneofE2 = other.oneofE2
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override internal func mergeFromCodedInputStream(input:CodedInputStream) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override internal func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            let valueInte = try input.readEnum()
            if let enumse = Proto3PreserveUnknownEnumUnittest.MyEnum(rawValue:valueInte){
                 e = enumse
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueInte))
            }

          case 18 :
            let valueIntrepeatedE = try input.readEnum()
            if let enumsrepeatedE = Proto3PreserveUnknownEnumUnittest.MyEnum(rawValue:valueIntrepeatedE) {
                 builderResult.repeatedE += [enumsrepeatedE]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntrepeatedE))
            }

          case 26 :
            let length:Int32 = try input.readRawVarint32()
            let oldLimit:Int32 = try input.pushLimit(length)
            while input.bytesUntilLimit() > 0 {
            let valueIntrepeatedPackedE = try input.readEnum()
            if let enumsrepeatedPackedE = Proto3PreserveUnknownEnumUnittest.MyEnum(rawValue:valueIntrepeatedPackedE) {
                 builderResult.repeatedPackedE += [enumsrepeatedPackedE]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntrepeatedPackedE))
            }
            }
            input.popLimit(oldLimit)

          case 34 :
            let valueIntrepeatedPackedUnexpectedE = try input.readEnum()
            if let enumsrepeatedPackedUnexpectedE = Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra(rawValue:valueIntrepeatedPackedUnexpectedE) {
                 builderResult.repeatedPackedUnexpectedE += [enumsrepeatedPackedUnexpectedE]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntrepeatedPackedUnexpectedE))
            }

          case 40 :
            let valueIntoneofE1 = try input.readEnum()
            if let enumsoneofE1 = Proto3PreserveUnknownEnumUnittest.MyEnum(rawValue:valueIntoneofE1){
                 oneofE1 = enumsoneofE1
            } else {
                 try unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueIntoneofE1))
            }

          case 48 :
            let valueIntoneofE2 = try input.readEnum()
            if let enumsoneofE2 = Proto3PreserveUnknownEnumUnittest.MyEnum(rawValue:valueIntoneofE2){
                 oneofE2 = enumsoneofE2
            } else {
                 try unknownFieldsBuilder.mergeVarintField(6, value:Int64(valueIntoneofE2))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class internal func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
        let resultDecodedBuilder = Proto3PreserveUnknownEnumUnittest.MyMessage.Builder()
        if let jsonValueE = jsonMap["e"] as? String {
          resultDecodedBuilder.e = try Proto3PreserveUnknownEnumUnittest.MyEnum.fromString(jsonValueE)
        }
        if let jsonValueRepeatedE = jsonMap["repeatedE"] as? Array<String> {
          var jsonArrayRepeatedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnum> = []
          for oneValueRepeatedE in jsonValueRepeatedE {
            let enumFromStringRepeatedE = try Proto3PreserveUnknownEnumUnittest.MyEnum.fromString(oneValueRepeatedE)
            jsonArrayRepeatedE += [enumFromStringRepeatedE]
          }
          resultDecodedBuilder.repeatedE = jsonArrayRepeatedE
        }
        if let jsonValueRepeatedPackedE = jsonMap["repeatedPackedE"] as? Array<String> {
          var jsonArrayRepeatedPackedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnum> = []
          for oneValueRepeatedPackedE in jsonValueRepeatedPackedE {
            let enumFromStringRepeatedPackedE = try Proto3PreserveUnknownEnumUnittest.MyEnum.fromString(oneValueRepeatedPackedE)
            jsonArrayRepeatedPackedE += [enumFromStringRepeatedPackedE]
          }
          resultDecodedBuilder.repeatedPackedE = jsonArrayRepeatedPackedE
        }
        if let jsonValueRepeatedPackedUnexpectedE = jsonMap["repeatedPackedUnexpectedE"] as? Array<String> {
          var jsonArrayRepeatedPackedUnexpectedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra> = []
          for oneValueRepeatedPackedUnexpectedE in jsonValueRepeatedPackedUnexpectedE {
            let enumFromStringRepeatedPackedUnexpectedE = try Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra.fromString(oneValueRepeatedPackedUnexpectedE)
            jsonArrayRepeatedPackedUnexpectedE += [enumFromStringRepeatedPackedUnexpectedE]
          }
          resultDecodedBuilder.repeatedPackedUnexpectedE = jsonArrayRepeatedPackedUnexpectedE
        }
        if let jsonValueOneofE1 = jsonMap["oneofE1"] as? String {
          resultDecodedBuilder.oneofE1 = try Proto3PreserveUnknownEnumUnittest.MyEnum.fromString(jsonValueOneofE1)
        }
        if let jsonValueOneofE2 = jsonMap["oneofE2"] as? String {
          resultDecodedBuilder.oneofE2 = try Proto3PreserveUnknownEnumUnittest.MyEnum.fromString(jsonValueOneofE2)
        }
        return resultDecodedBuilder
      }
      override class internal func fromJSONToBuilder(data:NSData) throws -> Proto3PreserveUnknownEnumUnittest.MyMessage.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Proto3PreserveUnknownEnumUnittest.MyMessage.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final internal class MyMessagePlusExtra : GeneratedMessage, GeneratedMessageProtocol {


    //OneOf declaration start

    internal enum O {
      case OOneOfNotSet

      internal func checkOneOfIsSet() -> Bool {
           switch self {
           case .OOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case OneofE1(Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra)

      internal static func getOneofE1(value:O) -> Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra? {
           switch value {
           case .OneofE1(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case OneofE2(Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra)

      internal static func getOneofE2(value:O) -> Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra? {
           switch value {
           case .OneofE2(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageO:MyMessagePlusExtra.O =  MyMessagePlusExtra.O.OOneOfNotSet
    private(set) var e:Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra = Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra.EFoo
    private(set) var hasE:Bool = false
    private var repeatedEMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra> = Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra>()
    private var repeatedPackedEMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedPackedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra> = Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra>()
    private var repeatedPackedUnexpectedEMemoizedSerializedSize:Int32 = 0
    private(set) var repeatedPackedUnexpectedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra> = Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra>()
    private(set) var hasOneofE1:Bool {
          get {
               if MyMessagePlusExtra.O.getOneofE1(storageO) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofE1:Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra!{
         get {
              return MyMessagePlusExtra.O.getOneofE1(storageO)
         }
         set (newvalue) {
              storageO = MyMessagePlusExtra.O.OneofE1(newvalue)
         }
    }
    private(set) var hasOneofE2:Bool {
          get {
               if MyMessagePlusExtra.O.getOneofE2(storageO) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    private(set) var oneofE2:Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra!{
         get {
              return MyMessagePlusExtra.O.getOneofE2(storageO)
         }
         set (newvalue) {
              storageO = MyMessagePlusExtra.O.OneofE2(newvalue)
         }
    }
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasE {
        try output.writeEnum(1, value:e.rawValue)
      }
      for oneValueOfrepeatedE in repeatedE {
          try output.writeEnum(2, value:oneValueOfrepeatedE.rawValue)
      }
      if !repeatedPackedE.isEmpty {
        try output.writeRawVarint32(26)
        try output.writeRawVarint32(repeatedPackedEMemoizedSerializedSize)
      }
      for oneValueOfrepeatedPackedE in repeatedPackedE {
          try output.writeEnumNoTag(oneValueOfrepeatedPackedE.rawValue)
      }
      if !repeatedPackedUnexpectedE.isEmpty {
        try output.writeRawVarint32(34)
        try output.writeRawVarint32(repeatedPackedUnexpectedEMemoizedSerializedSize)
      }
      for oneValueOfrepeatedPackedUnexpectedE in repeatedPackedUnexpectedE {
          try output.writeEnumNoTag(oneValueOfrepeatedPackedUnexpectedE.rawValue)
      }
      if hasOneofE1 {
        try output.writeEnum(5, value:oneofE1.rawValue)
      }
      if hasOneofE2 {
        try output.writeEnum(6, value:oneofE2.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasE) {
        serialize_size += e.rawValue.computeEnumSize(1)
      }
      var dataSizerepeatedE:Int32 = 0
      for oneValueOfrepeatedE in repeatedE {
          dataSizerepeatedE += oneValueOfrepeatedE.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedE
      serialize_size += (1 * Int32(repeatedE.count))
      var dataSizerepeatedPackedE:Int32 = 0
      for oneValueOfrepeatedPackedE in repeatedPackedE {
          dataSizerepeatedPackedE += oneValueOfrepeatedPackedE.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedPackedE
      if !repeatedPackedE.isEmpty {
        serialize_size += 1
        serialize_size += dataSizerepeatedPackedE.computeRawVarint32Size()
      }
      repeatedPackedEMemoizedSerializedSize = dataSizerepeatedPackedE
      var dataSizerepeatedPackedUnexpectedE:Int32 = 0
      for oneValueOfrepeatedPackedUnexpectedE in repeatedPackedUnexpectedE {
          dataSizerepeatedPackedUnexpectedE += oneValueOfrepeatedPackedUnexpectedE.rawValue.computeEnumSizeNoTag()
      }
      serialize_size += dataSizerepeatedPackedUnexpectedE
      if !repeatedPackedUnexpectedE.isEmpty {
        serialize_size += 1
        serialize_size += dataSizerepeatedPackedUnexpectedE.computeRawVarint32Size()
      }
      repeatedPackedUnexpectedEMemoizedSerializedSize = dataSizerepeatedPackedUnexpectedE
      if (hasOneofE1) {
        serialize_size += oneofE1.rawValue.computeEnumSize(5)
      }
      if (hasOneofE2) {
        serialize_size += oneofE2.rawValue.computeEnumSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra> {
      var mergedArray = Array<Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra? {
      return try Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    internal class func parseFromData(data:NSData) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra {
      return try Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder().mergeFromData(data, extensionRegistry:Proto3PreserveUnknownEnumUnittest.UnittestPreserveUnknownEnumRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra {
      return try Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra {
      return try Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra {
      return try Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra {
      return try Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra {
      return try Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func getBuilder() -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
      return Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.classBuilder() as! Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder
    }
    internal func getBuilder() -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
      return classBuilder() as! Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder
    }
    override internal class func classBuilder() -> MessageBuilder {
      return Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder()
    }
    override internal func classBuilder() -> MessageBuilder {
      return Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder()
    }
    internal func toBuilder() throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
      return try Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
      return try Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder().mergeFrom(prototype)
    }
    override internal func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasE {
        jsonMap["e"] = e.toString()
      }
      if !repeatedE.isEmpty {
        var jsonArrayRepeatedE:Array<String> = []
          for oneValueRepeatedE in repeatedE {
            jsonArrayRepeatedE += [oneValueRepeatedE.toString()]
          }
        jsonMap["repeatedE"] = jsonArrayRepeatedE
      }
      if !repeatedPackedE.isEmpty {
        var jsonArrayRepeatedPackedE:Array<String> = []
          for oneValueRepeatedPackedE in repeatedPackedE {
            jsonArrayRepeatedPackedE += [oneValueRepeatedPackedE.toString()]
          }
        jsonMap["repeatedPackedE"] = jsonArrayRepeatedPackedE
      }
      if !repeatedPackedUnexpectedE.isEmpty {
        var jsonArrayRepeatedPackedUnexpectedE:Array<String> = []
          for oneValueRepeatedPackedUnexpectedE in repeatedPackedUnexpectedE {
            jsonArrayRepeatedPackedUnexpectedE += [oneValueRepeatedPackedUnexpectedE.toString()]
          }
        jsonMap["repeatedPackedUnexpectedE"] = jsonArrayRepeatedPackedUnexpectedE
      }
      if hasOneofE1 {
        jsonMap["oneofE1"] = oneofE1.toString()
      }
      if hasOneofE2 {
        jsonMap["oneofE2"] = oneofE2.toString()
      }
      return jsonMap
    }
    override class internal func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra {
      return try Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder.decodeToBuilder(jsonMap).build()
    }
    override class internal func fromJSON(data:NSData) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra {
      return try Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder.fromJSONToBuilder(data).build()
    }
    override internal func getDescription(indent:String) throws -> String {
      var output = ""
      if (hasE) {
        output += "\(indent) e: \(e.rawValue)\n"
      }
      var repeatedEElementIndex:Int = 0
      for oneValueOfrepeatedE in repeatedE {
          output += "\(indent) repeatedE[\(repeatedEElementIndex)]: \(oneValueOfrepeatedE.rawValue)\n"
          repeatedEElementIndex++
      }
      var repeatedPackedEElementIndex:Int = 0
      for oneValueOfrepeatedPackedE in repeatedPackedE {
          output += "\(indent) repeatedPackedE[\(repeatedPackedEElementIndex)]: \(oneValueOfrepeatedPackedE.rawValue)\n"
          repeatedPackedEElementIndex++
      }
      var repeatedPackedUnexpectedEElementIndex:Int = 0
      for oneValueOfrepeatedPackedUnexpectedE in repeatedPackedUnexpectedE {
          output += "\(indent) repeatedPackedUnexpectedE[\(repeatedPackedUnexpectedEElementIndex)]: \(oneValueOfrepeatedPackedUnexpectedE.rawValue)\n"
          repeatedPackedUnexpectedEElementIndex++
      }
      if (hasOneofE1) {
        output += "\(indent) oneofE1: \(oneofE1.rawValue)\n"
      }
      if (hasOneofE2) {
        output += "\(indent) oneofE2: \(oneofE2.rawValue)\n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasE {
               hashCode = (hashCode &* 31) &+ Int(e.rawValue)
            }
            for oneValueOfrepeatedE in repeatedE {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedE.rawValue)
            }
            for oneValueOfrepeatedPackedE in repeatedPackedE {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedPackedE.rawValue)
            }
            for oneValueOfrepeatedPackedUnexpectedE in repeatedPackedUnexpectedE {
                hashCode = (hashCode &* 31) &+ Int(oneValueOfrepeatedPackedUnexpectedE.rawValue)
            }
            if hasOneofE1 {
               hashCode = (hashCode &* 31) &+ Int(oneofE1.rawValue)
            }
            if hasOneofE2 {
               hashCode = (hashCode &* 31) &+ Int(oneofE2.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra"
    }
    override internal func className() -> String {
        return "Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.self
    }
    //Meta information declaration end

    final internal class Builder : GeneratedMessageBuilder {
      private var builderResult:Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra = Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra()
      internal func getMessage() -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra {
          return builderResult
      }

      required override internal init () {
         super.init()
      }
        var hasE:Bool{
            get {
                return builderResult.hasE
            }
        }
        var e:Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra {
            get {
                return builderResult.e
            }
            set (value) {
                builderResult.hasE = true
                builderResult.e = value
            }
        }
        internal func setE(value:Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra) -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
          self.e = value
          return self
        }
        internal func clearE() -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
           builderResult.hasE = false
           builderResult.e = .EFoo
           return self
        }
      var repeatedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra> {
          get {
              return builderResult.repeatedE
          }
          set (value) {
              builderResult.repeatedE = value
          }
      }
      func setRepeatedE(value:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra>) -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
        self.repeatedE = value
        return self
      }
      internal func clearRepeatedE() -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
        builderResult.repeatedE.removeAll(keepCapacity: false)
        return self
      }
      var repeatedPackedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra> {
          get {
              return builderResult.repeatedPackedE
          }
          set (value) {
              builderResult.repeatedPackedE = value
          }
      }
      func setRepeatedPackedE(value:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra>) -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
        self.repeatedPackedE = value
        return self
      }
      internal func clearRepeatedPackedE() -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
        builderResult.repeatedPackedE.removeAll(keepCapacity: false)
        return self
      }
      var repeatedPackedUnexpectedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra> {
          get {
              return builderResult.repeatedPackedUnexpectedE
          }
          set (value) {
              builderResult.repeatedPackedUnexpectedE = value
          }
      }
      func setRepeatedPackedUnexpectedE(value:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra>) -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
        self.repeatedPackedUnexpectedE = value
        return self
      }
      internal func clearRepeatedPackedUnexpectedE() -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
        builderResult.repeatedPackedUnexpectedE.removeAll(keepCapacity: false)
        return self
      }
        var hasOneofE1:Bool{
            get {
                return builderResult.hasOneofE1
            }
        }
        var oneofE1:Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra {
            get {
                return builderResult.oneofE1
            }
            set (value) {
                builderResult.hasOneofE1 = true
                builderResult.oneofE1 = value
            }
        }
        internal func setOneofE1(value:Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra) -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
          self.oneofE1 = value
          return self
        }
        internal func clearOneofE1() -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
           builderResult.hasOneofE1 = false
           builderResult.oneofE1 = .EFoo
           return self
        }
        var hasOneofE2:Bool{
            get {
                return builderResult.hasOneofE2
            }
        }
        var oneofE2:Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra {
            get {
                return builderResult.oneofE2
            }
            set (value) {
                builderResult.hasOneofE2 = true
                builderResult.oneofE2 = value
            }
        }
        internal func setOneofE2(value:Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra) -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
          self.oneofE2 = value
          return self
        }
        internal func clearOneofE2() -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
           builderResult.hasOneofE2 = false
           builderResult.oneofE2 = .EFoo
           return self
        }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override internal func clear() -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
        builderResult = Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra()
        return self
      }
      override internal func clone() throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
        return try Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.builderWithPrototype(builderResult)
      }
      override internal func build() throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra {
           try checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra {
        let returnMe:Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra = builderResult
        return returnMe
      }
      internal func mergeFrom(other:Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
        if other == Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra() {
         return self
        }
        if other.hasE {
             e = other.e
        }
        if !other.repeatedE.isEmpty {
           builderResult.repeatedE += other.repeatedE
        }
        if !other.repeatedPackedE.isEmpty {
           builderResult.repeatedPackedE += other.repeatedPackedE
        }
        if !other.repeatedPackedUnexpectedE.isEmpty {
           builderResult.repeatedPackedUnexpectedE += other.repeatedPackedUnexpectedE
        }
        if other.hasOneofE1 {
             oneofE1 = other.oneofE1
        }
        if other.hasOneofE2 {
             oneofE2 = other.oneofE2
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override internal func mergeFromCodedInputStream(input:CodedInputStream) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override internal func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            let valueInte = try input.readEnum()
            if let enumse = Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra(rawValue:valueInte){
                 e = enumse
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueInte))
            }

          case 18 :
            let valueIntrepeatedE = try input.readEnum()
            if let enumsrepeatedE = Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra(rawValue:valueIntrepeatedE) {
                 builderResult.repeatedE += [enumsrepeatedE]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntrepeatedE))
            }

          case 26 :
            let length:Int32 = try input.readRawVarint32()
            let oldLimit:Int32 = try input.pushLimit(length)
            while input.bytesUntilLimit() > 0 {
            let valueIntrepeatedPackedE = try input.readEnum()
            if let enumsrepeatedPackedE = Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra(rawValue:valueIntrepeatedPackedE) {
                 builderResult.repeatedPackedE += [enumsrepeatedPackedE]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntrepeatedPackedE))
            }
            }
            input.popLimit(oldLimit)

          case 34 :
            let length:Int32 = try input.readRawVarint32()
            let oldLimit:Int32 = try input.pushLimit(length)
            while input.bytesUntilLimit() > 0 {
            let valueIntrepeatedPackedUnexpectedE = try input.readEnum()
            if let enumsrepeatedPackedUnexpectedE = Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra(rawValue:valueIntrepeatedPackedUnexpectedE) {
                 builderResult.repeatedPackedUnexpectedE += [enumsrepeatedPackedUnexpectedE]
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntrepeatedPackedUnexpectedE))
            }
            }
            input.popLimit(oldLimit)

          case 40 :
            let valueIntoneofE1 = try input.readEnum()
            if let enumsoneofE1 = Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra(rawValue:valueIntoneofE1){
                 oneofE1 = enumsoneofE1
            } else {
                 try unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueIntoneofE1))
            }

          case 48 :
            let valueIntoneofE2 = try input.readEnum()
            if let enumsoneofE2 = Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra(rawValue:valueIntoneofE2){
                 oneofE2 = enumsoneofE2
            } else {
                 try unknownFieldsBuilder.mergeVarintField(6, value:Int64(valueIntoneofE2))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class internal func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
        let resultDecodedBuilder = Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder()
        if let jsonValueE = jsonMap["e"] as? String {
          resultDecodedBuilder.e = try Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra.fromString(jsonValueE)
        }
        if let jsonValueRepeatedE = jsonMap["repeatedE"] as? Array<String> {
          var jsonArrayRepeatedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra> = []
          for oneValueRepeatedE in jsonValueRepeatedE {
            let enumFromStringRepeatedE = try Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra.fromString(oneValueRepeatedE)
            jsonArrayRepeatedE += [enumFromStringRepeatedE]
          }
          resultDecodedBuilder.repeatedE = jsonArrayRepeatedE
        }
        if let jsonValueRepeatedPackedE = jsonMap["repeatedPackedE"] as? Array<String> {
          var jsonArrayRepeatedPackedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra> = []
          for oneValueRepeatedPackedE in jsonValueRepeatedPackedE {
            let enumFromStringRepeatedPackedE = try Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra.fromString(oneValueRepeatedPackedE)
            jsonArrayRepeatedPackedE += [enumFromStringRepeatedPackedE]
          }
          resultDecodedBuilder.repeatedPackedE = jsonArrayRepeatedPackedE
        }
        if let jsonValueRepeatedPackedUnexpectedE = jsonMap["repeatedPackedUnexpectedE"] as? Array<String> {
          var jsonArrayRepeatedPackedUnexpectedE:Array<Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra> = []
          for oneValueRepeatedPackedUnexpectedE in jsonValueRepeatedPackedUnexpectedE {
            let enumFromStringRepeatedPackedUnexpectedE = try Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra.fromString(oneValueRepeatedPackedUnexpectedE)
            jsonArrayRepeatedPackedUnexpectedE += [enumFromStringRepeatedPackedUnexpectedE]
          }
          resultDecodedBuilder.repeatedPackedUnexpectedE = jsonArrayRepeatedPackedUnexpectedE
        }
        if let jsonValueOneofE1 = jsonMap["oneofE1"] as? String {
          resultDecodedBuilder.oneofE1 = try Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra.fromString(jsonValueOneofE1)
        }
        if let jsonValueOneofE2 = jsonMap["oneofE2"] as? String {
          resultDecodedBuilder.oneofE2 = try Proto3PreserveUnknownEnumUnittest.MyEnumPlusExtra.fromString(jsonValueOneofE2)
        }
        return resultDecodedBuilder
      }
      override class internal func fromJSONToBuilder(data:NSData) throws -> Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Proto3PreserveUnknownEnumUnittest.MyMessagePlusExtra.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
