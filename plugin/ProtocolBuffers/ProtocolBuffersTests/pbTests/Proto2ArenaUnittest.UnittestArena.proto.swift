// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "unittest_arena.proto"
// Syntax "Proto2"

import Foundation
import ProtocolBuffers

public struct Proto2ArenaUnittest { }

public func == (lhs: Proto2ArenaUnittest.NestedMessage, rhs: Proto2ArenaUnittest.NestedMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasD == rhs.hasD) && (!lhs.hasD || lhs.d == rhs.d)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Proto2ArenaUnittest.ArenaMessage, rhs: Proto2ArenaUnittest.ArenaMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.repeatedNestedMessage == rhs.repeatedNestedMessage)
  fieldCheck = fieldCheck && (lhs.repeatedImportNoArenaMessage == rhs.repeatedImportNoArenaMessage)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Proto2ArenaUnittest {
  public struct UnittestArenaRoot {
    public static var sharedInstance : UnittestArenaRoot {
     struct Static {
         static let instance : UnittestArenaRoot = UnittestArenaRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Proto2ArenaUnittest.UnittestNoArenaImportRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class NestedMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasD:Bool = false
    public private(set) var d:Int32 = Int32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasD {
        try output.writeInt32(1, value:d)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasD {
        serialize_size += d.computeInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Proto2ArenaUnittest.NestedMessage> {
      var mergedArray = Array<Proto2ArenaUnittest.NestedMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Proto2ArenaUnittest.NestedMessage? {
      return try Proto2ArenaUnittest.NestedMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Proto2ArenaUnittest.NestedMessage {
      return try Proto2ArenaUnittest.NestedMessage.Builder().mergeFromData(data, extensionRegistry:Proto2ArenaUnittest.UnittestArenaRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Proto2ArenaUnittest.NestedMessage {
      return try Proto2ArenaUnittest.NestedMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Proto2ArenaUnittest.NestedMessage {
      return try Proto2ArenaUnittest.NestedMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Proto2ArenaUnittest.NestedMessage {
      return try Proto2ArenaUnittest.NestedMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Proto2ArenaUnittest.NestedMessage {
      return try Proto2ArenaUnittest.NestedMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Proto2ArenaUnittest.NestedMessage {
      return try Proto2ArenaUnittest.NestedMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Proto2ArenaUnittest.NestedMessage.Builder {
      return Proto2ArenaUnittest.NestedMessage.classBuilder() as! Proto2ArenaUnittest.NestedMessage.Builder
    }
    public func getBuilder() -> Proto2ArenaUnittest.NestedMessage.Builder {
      return classBuilder() as! Proto2ArenaUnittest.NestedMessage.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Proto2ArenaUnittest.NestedMessage.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Proto2ArenaUnittest.NestedMessage.Builder()
    }
    public func toBuilder() throws -> Proto2ArenaUnittest.NestedMessage.Builder {
      return try Proto2ArenaUnittest.NestedMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Proto2ArenaUnittest.NestedMessage) throws -> Proto2ArenaUnittest.NestedMessage.Builder {
      return try Proto2ArenaUnittest.NestedMessage.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if hasD {
        jsonMap["d"] = NSNumber(int:d)
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Proto2ArenaUnittest.NestedMessage {
      return try Proto2ArenaUnittest.NestedMessage.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Proto2ArenaUnittest.NestedMessage {
      return try Proto2ArenaUnittest.NestedMessage.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      if hasD {
        output += "\(indent) d: \(d) \n"
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasD {
               hashCode = (hashCode &* 31) &+ d.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Proto2ArenaUnittest.NestedMessage"
    }
    override public func className() -> String {
        return "Proto2ArenaUnittest.NestedMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Proto2ArenaUnittest.NestedMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Proto2ArenaUnittest.NestedMessage = Proto2ArenaUnittest.NestedMessage()
      public func getMessage() -> Proto2ArenaUnittest.NestedMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasD:Bool {
           get {
                return builderResult.hasD
           }
      }
      public var d:Int32 {
           get {
                return builderResult.d
           }
           set (value) {
               builderResult.hasD = true
               builderResult.d = value
           }
      }
      public func setD(value:Int32) -> Proto2ArenaUnittest.NestedMessage.Builder {
        self.d = value
        return self
      }
      public func clearD() -> Proto2ArenaUnittest.NestedMessage.Builder{
           builderResult.hasD = false
           builderResult.d = Int32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Proto2ArenaUnittest.NestedMessage.Builder {
        builderResult = Proto2ArenaUnittest.NestedMessage()
        return self
      }
      override public func clone() throws -> Proto2ArenaUnittest.NestedMessage.Builder {
        return try Proto2ArenaUnittest.NestedMessage.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Proto2ArenaUnittest.NestedMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Proto2ArenaUnittest.NestedMessage {
        let returnMe:Proto2ArenaUnittest.NestedMessage = builderResult
        return returnMe
      }
      public func mergeFrom(other:Proto2ArenaUnittest.NestedMessage) throws -> Proto2ArenaUnittest.NestedMessage.Builder {
        if other == Proto2ArenaUnittest.NestedMessage() {
         return self
        }
        if other.hasD {
             d = other.d
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Proto2ArenaUnittest.NestedMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Proto2ArenaUnittest.NestedMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            d = try input.readInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Proto2ArenaUnittest.NestedMessage.Builder {
        let resultDecodedBuilder = Proto2ArenaUnittest.NestedMessage.Builder()
        if let jsonValueD = jsonMap["d"] as? NSNumber {
          resultDecodedBuilder.d = jsonValueD.intValue
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Proto2ArenaUnittest.NestedMessage.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Proto2ArenaUnittest.NestedMessage.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

  final public class ArenaMessage : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var repeatedNestedMessage:Array<Proto2ArenaUnittest.NestedMessage>  = Array<Proto2ArenaUnittest.NestedMessage>()
    public private(set) var repeatedImportNoArenaMessage:Array<Proto2ArenaUnittest.ImportNoArenaNestedMessage>  = Array<Proto2ArenaUnittest.ImportNoArenaNestedMessage>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementRepeatedNestedMessage in repeatedNestedMessage {
          try output.writeMessage(1, value:oneElementRepeatedNestedMessage)
      }
      for oneElementRepeatedImportNoArenaMessage in repeatedImportNoArenaMessage {
          try output.writeMessage(2, value:oneElementRepeatedImportNoArenaMessage)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementRepeatedNestedMessage in repeatedNestedMessage {
          serialize_size += oneElementRepeatedNestedMessage.computeMessageSize(1)
      }
      for oneElementRepeatedImportNoArenaMessage in repeatedImportNoArenaMessage {
          serialize_size += oneElementRepeatedImportNoArenaMessage.computeMessageSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Proto2ArenaUnittest.ArenaMessage> {
      var mergedArray = Array<Proto2ArenaUnittest.ArenaMessage>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Proto2ArenaUnittest.ArenaMessage? {
      return try Proto2ArenaUnittest.ArenaMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Proto2ArenaUnittest.ArenaMessage {
      return try Proto2ArenaUnittest.ArenaMessage.Builder().mergeFromData(data, extensionRegistry:Proto2ArenaUnittest.UnittestArenaRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Proto2ArenaUnittest.ArenaMessage {
      return try Proto2ArenaUnittest.ArenaMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Proto2ArenaUnittest.ArenaMessage {
      return try Proto2ArenaUnittest.ArenaMessage.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Proto2ArenaUnittest.ArenaMessage {
      return try Proto2ArenaUnittest.ArenaMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Proto2ArenaUnittest.ArenaMessage {
      return try Proto2ArenaUnittest.ArenaMessage.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Proto2ArenaUnittest.ArenaMessage {
      return try Proto2ArenaUnittest.ArenaMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Proto2ArenaUnittest.ArenaMessage.Builder {
      return Proto2ArenaUnittest.ArenaMessage.classBuilder() as! Proto2ArenaUnittest.ArenaMessage.Builder
    }
    public func getBuilder() -> Proto2ArenaUnittest.ArenaMessage.Builder {
      return classBuilder() as! Proto2ArenaUnittest.ArenaMessage.Builder
    }
    override public class func classBuilder() -> MessageBuilder {
      return Proto2ArenaUnittest.ArenaMessage.Builder()
    }
    override public func classBuilder() -> MessageBuilder {
      return Proto2ArenaUnittest.ArenaMessage.Builder()
    }
    public func toBuilder() throws -> Proto2ArenaUnittest.ArenaMessage.Builder {
      return try Proto2ArenaUnittest.ArenaMessage.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Proto2ArenaUnittest.ArenaMessage) throws -> Proto2ArenaUnittest.ArenaMessage.Builder {
      return try Proto2ArenaUnittest.ArenaMessage.Builder().mergeFrom(prototype)
    }
    override public func encode() throws -> Dictionary<String,AnyObject> {
      guard isInitialized() else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
      }

      var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
      if !repeatedNestedMessage.isEmpty {
        var jsonArrayRepeatedNestedMessage:Array<Dictionary<String,AnyObject>> = []
          for oneValueRepeatedNestedMessage in repeatedNestedMessage {
            let ecodedMessageRepeatedNestedMessage = try oneValueRepeatedNestedMessage.encode()
            jsonArrayRepeatedNestedMessage += [ecodedMessageRepeatedNestedMessage]
          }
        jsonMap["repeatedNestedMessage"] = jsonArrayRepeatedNestedMessage
      }
      if !repeatedImportNoArenaMessage.isEmpty {
        var jsonArrayRepeatedImportNoArenaMessage:Array<Dictionary<String,AnyObject>> = []
          for oneValueRepeatedImportNoArenaMessage in repeatedImportNoArenaMessage {
            let ecodedMessageRepeatedImportNoArenaMessage = try oneValueRepeatedImportNoArenaMessage.encode()
            jsonArrayRepeatedImportNoArenaMessage += [ecodedMessageRepeatedImportNoArenaMessage]
          }
        jsonMap["repeatedImportNoArenaMessage"] = jsonArrayRepeatedImportNoArenaMessage
      }
      return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Proto2ArenaUnittest.ArenaMessage {
      return try Proto2ArenaUnittest.ArenaMessage.Builder.decodeToBuilder(jsonMap).build()
    }
    override class public func fromJSON(data:NSData) throws -> Proto2ArenaUnittest.ArenaMessage {
      return try Proto2ArenaUnittest.ArenaMessage.Builder.fromJSONToBuilder(data).build()
    }
    override public func getDescription(indent:String) throws -> String {
      var output = ""
      var repeatedNestedMessageElementIndex:Int = 0
      for oneElementRepeatedNestedMessage in repeatedNestedMessage {
          output += "\(indent) repeatedNestedMessage[\(repeatedNestedMessageElementIndex)] {\n"
          output += try oneElementRepeatedNestedMessage.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          repeatedNestedMessageElementIndex += 1
      }
      var repeatedImportNoArenaMessageElementIndex:Int = 0
      for oneElementRepeatedImportNoArenaMessage in repeatedImportNoArenaMessage {
          output += "\(indent) repeatedImportNoArenaMessage[\(repeatedImportNoArenaMessageElementIndex)] {\n"
          output += try oneElementRepeatedImportNoArenaMessage.getDescription("\(indent)  ")
          output += "\(indent)}\n"
          repeatedImportNoArenaMessageElementIndex += 1
      }
      output += unknownFields.getDescription(indent)
      return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementRepeatedNestedMessage in repeatedNestedMessage {
                hashCode = (hashCode &* 31) &+ oneElementRepeatedNestedMessage.hashValue
            }
            for oneElementRepeatedImportNoArenaMessage in repeatedImportNoArenaMessage {
                hashCode = (hashCode &* 31) &+ oneElementRepeatedImportNoArenaMessage.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Proto2ArenaUnittest.ArenaMessage"
    }
    override public func className() -> String {
        return "Proto2ArenaUnittest.ArenaMessage"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Proto2ArenaUnittest.ArenaMessage.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Proto2ArenaUnittest.ArenaMessage = Proto2ArenaUnittest.ArenaMessage()
      public func getMessage() -> Proto2ArenaUnittest.ArenaMessage {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var repeatedNestedMessage:Array<Proto2ArenaUnittest.NestedMessage> {
           get {
               return builderResult.repeatedNestedMessage
           }
           set (value) {
               builderResult.repeatedNestedMessage = value
           }
      }
      public func setRepeatedNestedMessage(value:Array<Proto2ArenaUnittest.NestedMessage>) -> Proto2ArenaUnittest.ArenaMessage.Builder {
        self.repeatedNestedMessage = value
        return self
      }
      public func clearRepeatedNestedMessage() -> Proto2ArenaUnittest.ArenaMessage.Builder {
        builderResult.repeatedNestedMessage.removeAll(keepCapacity: false)
        return self
      }
      public var repeatedImportNoArenaMessage:Array<Proto2ArenaUnittest.ImportNoArenaNestedMessage> {
           get {
               return builderResult.repeatedImportNoArenaMessage
           }
           set (value) {
               builderResult.repeatedImportNoArenaMessage = value
           }
      }
      public func setRepeatedImportNoArenaMessage(value:Array<Proto2ArenaUnittest.ImportNoArenaNestedMessage>) -> Proto2ArenaUnittest.ArenaMessage.Builder {
        self.repeatedImportNoArenaMessage = value
        return self
      }
      public func clearRepeatedImportNoArenaMessage() -> Proto2ArenaUnittest.ArenaMessage.Builder {
        builderResult.repeatedImportNoArenaMessage.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override public func clear() -> Proto2ArenaUnittest.ArenaMessage.Builder {
        builderResult = Proto2ArenaUnittest.ArenaMessage()
        return self
      }
      override public func clone() throws -> Proto2ArenaUnittest.ArenaMessage.Builder {
        return try Proto2ArenaUnittest.ArenaMessage.builderWithPrototype(builderResult)
      }
      override public func build() throws -> Proto2ArenaUnittest.ArenaMessage {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Proto2ArenaUnittest.ArenaMessage {
        let returnMe:Proto2ArenaUnittest.ArenaMessage = builderResult
        return returnMe
      }
      public func mergeFrom(other:Proto2ArenaUnittest.ArenaMessage) throws -> Proto2ArenaUnittest.ArenaMessage.Builder {
        if other == Proto2ArenaUnittest.ArenaMessage() {
         return self
        }
        if !other.repeatedNestedMessage.isEmpty  {
           builderResult.repeatedNestedMessage += other.repeatedNestedMessage
        }
        if !other.repeatedImportNoArenaMessage.isEmpty  {
           builderResult.repeatedImportNoArenaMessage += other.repeatedImportNoArenaMessage
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Proto2ArenaUnittest.ArenaMessage.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Proto2ArenaUnittest.ArenaMessage.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let protobufTag = try input.readTag()
          switch protobufTag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder = Proto2ArenaUnittest.NestedMessage.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedNestedMessage += [subBuilder.buildPartial()]

          case 18 :
            let subBuilder = Proto2ArenaUnittest.ImportNoArenaNestedMessage.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            repeatedImportNoArenaMessage += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
      override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Proto2ArenaUnittest.ArenaMessage.Builder {
        let resultDecodedBuilder = Proto2ArenaUnittest.ArenaMessage.Builder()
        if let jsonValueRepeatedNestedMessage = jsonMap["repeatedNestedMessage"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayRepeatedNestedMessage:Array<Proto2ArenaUnittest.NestedMessage> = []
          for oneValueRepeatedNestedMessage in jsonValueRepeatedNestedMessage {
            let messageFromStringRepeatedNestedMessage = try Proto2ArenaUnittest.NestedMessage.Builder.decodeToBuilder(oneValueRepeatedNestedMessage).build()

            jsonArrayRepeatedNestedMessage += [messageFromStringRepeatedNestedMessage]
          }
          resultDecodedBuilder.repeatedNestedMessage = jsonArrayRepeatedNestedMessage
        }
        if let jsonValueRepeatedImportNoArenaMessage = jsonMap["repeatedImportNoArenaMessage"] as? Array<Dictionary<String,AnyObject>> {
          var jsonArrayRepeatedImportNoArenaMessage:Array<Proto2ArenaUnittest.ImportNoArenaNestedMessage> = []
          for oneValueRepeatedImportNoArenaMessage in jsonValueRepeatedImportNoArenaMessage {
            let messageFromStringRepeatedImportNoArenaMessage = try Proto2ArenaUnittest.ImportNoArenaNestedMessage.Builder.decodeToBuilder(oneValueRepeatedImportNoArenaMessage).build()

            jsonArrayRepeatedImportNoArenaMessage += [messageFromStringRepeatedImportNoArenaMessage]
          }
          resultDecodedBuilder.repeatedImportNoArenaMessage = jsonArrayRepeatedImportNoArenaMessage
        }
        return resultDecodedBuilder
      }
      override class public func fromJSONToBuilder(data:NSData) throws -> Proto2ArenaUnittest.ArenaMessage.Builder {
        let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
        guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
          throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
        }
        return try Proto2ArenaUnittest.ArenaMessage.Builder.decodeToBuilder(jsDataCast)
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
